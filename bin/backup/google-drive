#!/usr/bin/env python
# vim: set softtabstop=2 ts=2 sw=2 expandtab: 
#
#
# Backs Archie DB and Content up to Google Drive
# Copyright (c) 2015 Karl Vollmer <karl.vollmer@gmail.com>
#
# Required modules:
# google-api-python-client `pip install google-api-python-client`
# magic >= 0.1 https://github.com/ahupp/python-magic
#

import sys,time,os.path,magic,argparse,httplib2
import atom.data
import subprocess
import ConfigParser
import magic

from datetime import datetime
from apiclient.discovery import build
from apiclient.http import MediaFileUpload
from oauth2client.client import SignedJwtAssertionCredentials
from oauth2client.file import Storage

"""
 BackupMysql
  Runs the backups of the mysqldb, and then bzips it
"""
def BackupMysql(user,password,db,target):

  """ Run DB Backup """
  CmdMysqlDump = 'mysqldump -u%s -p%s --add-drop-table --allow-keywords %s > %s' % (user,password,db,target+'/mysql.backup')
  runDump = os.system(CmdMysqlDump)

  cmdZip = 'tar -C %s -cjf %s %s' % (target,target+'/mysql.bz2',target+'/mysql.backup')
  runZip = subprocess.Popen(cmdZip.split(),stdout=subprocess.PIPE,stderr=subprocess.STDOUT)
  runZip.wait()

  if runZip.returncode != 0:
    print 'MySQL Zip :: Non-zero exit code:%s executing: %s returned %s' % (runZip.returncode,cmdZip,runZip.stdout.read())
  else:
    print 'MySQL Database exported and compressed...'
  return True

"""
 BackupContent
  Zips up all of the data_root content, this is the big one
"""
def BackupContent(source,target):
  print 'Backing up %s, this can take a long time...' % (source)
  sys.stdout.flush()
  """ Start the backup """
  cmdZip = 'tar -C %s -cjf %s .' % (source,target+'/content.bz2')
  print cmdZip
  runZip = subprocess.Popen(cmdZip.split(),stdout=subprocess.PIPE,stderr=subprocess.STDOUT)
  runZip.wait()

  if runZip.returncode != 0:
    print 'Content Backup :: Non-zero exit code:%s executing: %s returned %s' % (runZip.returncode,cmdZip,runZip.stdout.read())
  else:
    print 'Content Backup Completed...'
  return True
  
def UploadToDrive(sourceDir,serviceEmail,privateKey,credentialsStorage,folderID=None):
  serviceScope        = 'https://www.googleapis.com/auth/drive.file'
  serviceApiVersion   = 'v2'
  serviceName         = 'drive'

  storage = Storage(credentialsStorage)
  credentials = storage.get()
  http = httplib2.Http()

  if credentials is None or credentials.invalid:
    try:
      with open(privateKey,'rb') as privKeyHandle:
        privKey = privKeyHandle.read()
      credentials = SignedJwtAssertionCredentials(serviceEmail,privKey,scope=serviceScope)
      storage.put(credentials)
    except IOError:
      print 'UploadToDrive :: IOError No such file, or permission denied reading %s' % (privateKey)
      sys.exit(1)
  else:
    credentials.refresh(http)

  http = credentials.authorize(http)
  driveService = build(serviceName=serviceName,version=serviceApiVersion,http=http)

  """ Get a list of files in our tmp dir """
  sourceFiles = [ f for f in listdir(sourceDir) if isfile(join(sourceDir,f)) ]
  uploadTime = datetime.now()
  
  for sourceFile in sourceFiles:
    mimeType = magic.Magic(mime=True).from_file(sourceFile)
    media_body = MediaFileUpload(sourceFile,mimetype=mimeType,resumable=True)
    body = {
      'title': os.path.splitext(os.basename(sourceFile))[0] + uploadTime.isoformat() + '.bz2',
      'mimeType': mimeType,
      'description': 'Archie Automated Backup -' + uploadTime.isoformat(),
    }

    if folderID:
      body['parents'] = [{'id':folderID},]
    """ Upload! """
    result = driveService.files().insert(body=body,media_body=media_body).execute()
    print 'Uploaded %s - available at %s' % (sourceFile,result['alternateLink'])
    sys.stdout.flush()

  return True

if __name__ == '__main__':

  """ Check for Arguments """
  parser = argparse.ArgumentParser(description='Backup Archie to Google Drive',prog='google-drive',epilog='(c) 2015 Karl Vollmer <karl.vollmer@gmail.com>')
  parser.add_argument('backuptype',choices=['all','mysql','content'],nargs='?',help='Items to Backup')
  parser.add_argument('-no-upload',action='store_false',help='Backup Files but do not upload',dest='upload')
  if len(sys.argv)==1:
    parser.print_help()
    sys.exit(1)
  args=parser.parse_args()

  """ Load the Config file """
  Config = ConfigParser.ConfigParser()
  Config.read(os.path.dirname(os.path.abspath(__file__)) + '/backup.cfg.php')
  ArchieConfig = ConfigParser.ConfigParser()
  ArchieConfig.read(os.path.dirname(os.path.abspath(__file__ + '/../../')) + '/config/settings.php')

  """ MySQL backup """
  if args.backuptype == 'all' or args.backuptype == 'mysql':
    BackupMysql(ArchieConfig.get('main','database_username'),ArchieConfig.get('main','database_password'),
                                  ArchieConfig.get('main','database_name'),Config.get('main','tmpdir'))
  
  """ Content Backup """
  if args.backuptype == 'all' or args.backuptype == 'content':
    BackupContent(ArchieConfig.get('main','data_root'),Config.get('main','tmpdir'))

  """ Copy to Drive """
  UploadToDrive(Config.get('main','tmpdir'),Config.get('google','serviceEmail'),Config.get('google','privateKey'),
                Config.get('google','credentialsStorage'),Config.get('google','folderID'))
