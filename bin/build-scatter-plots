#!/usr/bin/env python
# vim: set softtabstop=2 ts=2 sw=2 expandtab: 

import MySQLdb
import os, errno, csv
import numpy as np
import matplotlib
matplotlib.use('Agg') 
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D


def save_scatterplot(plottitle,plotfilename,plot_cords,xcord,ycord,xlabel,ylabel):
  """
  Save a scatterplot to the specified filename 
  """
  print "Building:" + plottitle + " saving to " + plotfilename
  fig = plt.figure()
  plt.title(plottitle)
  plt.rcParams.update({'font.size': 10})
  plt.ticklabel_format(useOffset=False)
  plt.xlabel(xlabel)
  plt.ylabel(ylabel)
  ax1 = fit.add_subplot(111)
  if (len(plot_cords['fcr'][xcord]) > 0):
    ax1.scatter(plot_cords['fcr'][xcord],plot_cords['fcr'][ycord],s=20,marker='7',color=plot_cords['fcr']['colors'],alpha=0.5)
  if (len(plot_cords['debitage']['est']) > 0):
    ax1.scatter(plot_cords['debiatage'][xcord],plot_cords['debitage'][ycord],s=20,marker='7',color=plot_cords['debitage']['colors'],alpha=0.5)

  plt.savefig(plotfilename,format='png',bbox_inches='tight')
  plt.close()
def ensure_dir(dirname):
    """
    Ensure that a named directory exists; if it does not, attempt to create it.
    """
    try:
        os.makedirs(dirname)
    except OSError, e:
        if e.errno != errno.EEXIST:
            raise
def is_number(s):
  try:
    float(s)
    return True
  except ValueError:
    return False
class switch(object):
    def __init__(self, value):
        self.value = value
        self.fall = False

    def __iter__(self):
        """Return the match method once, then stop"""
        yield self.match
        raise StopIteration
    
    def match(self, *args):
        """Indicate whether or not to enter a case suite"""
        if self.fall or not args:
            return True
        elif self.value in args: # changed for v1.5, see below
            self.fall = True
            return True
        else:
            return False

archiedb=MySQLdb.connect(host='localhost',user='root',passwd='bob123',db='archie')
data_root='/var/lib/archie'
units = ()

levels=archiedb.cursor()
levels.execute("""SELECT `level`.`uid`,`level`.`northing`,`level`.`easting`,`site`.`name` FROM `level` LEFT JOIN `site` ON `site`.`uid`=`level`.`site` ORDER BY `level`.`uid`""")

level=levels.fetchone()
while level is not None:

  locus_txt = str(level[0])
  cursor=archiedb.cursor()
  cursor.execute("""SELECT `northing`,`easting`,`elevation`,`material`.`name`,`classification`.`name` FROM `record` JOIN `material` ON `material`.`uid`=`record`.`material` JOIN `classification` ON `classification`.`uid`=`record`.`classification` WHERE `level`='%s' AND (`northing`>0 AND `easting`>0 AND `elevation`>0)""",int(level[0]))

  # Set the sitename
  site=level[3]

  # Distinct cords per catagory, this is not sustabiable
  # FIXME
  plot_cords = dict()
  plot_cords['fcr'] = {'est': (),'nor': (),'elv':(),'colors':() }
  plot_cords['debitage'] = {'est': (),'nor': (),'elv':(),'colors':() }
  plot_cords['charcoal'] = {'est': (),'nor': (),'elv':(),'colors':() }
  plot_cords['bone'] = {'est': (),'nor': (),'elv':(),'colors':() }
  plot_cords['shell'] = {'est': (),'nor': (),'elv':(),'colors':() }
  plot_cords['tool'] = {'est': (),'nor': (),'elv':(),'colors':() }
  plot_cords['other'] = {'est': (),'nor': (),'elv':(),'colors':() }

  cord_count = 0

  # Easting on the XY plot
  est = ();
  # Northing on the XY plot
  nor = ();
  # Elevation (Y) / Easting (X)
  elv = ();
  # Blank colors tuple
  colors = ();

  cords = cursor.fetchone()
  while cords is not None:
    # Color based on classification
    for case in switch(cords[4]):
      if case('FCR'):
        obj_type = 'fcr'
        color = 'red'
        break;
      if case('Debitage'):
        obj_type = 'debitage'
        color = 'blue'
        break;
      if case('Charcoal'):
        obj_type = 'charcoal'
        color = 'm'
        break;
      if case('Bone - Avian'):
        obj_type = 'bone'
        color = 'c'
      if case('Bone - Fish'):
        obj_type = 'bone'
        color = 'c'
      if case('Bone - Mammal'):
        obj_type = 'bone'
        color = 'c'
      if case('Bone - Unknown'):
        obj_type = 'bone'
        color = 'c'
        break;
      if case('Shell - River Mussel'):
        obj_type = 'shell'
        color = 'y'
        break;
      if case('Biface'):
        obj_type = 'tool'
        color = 'green'
      if case('Blade'):
        obj_type = 'tool'
        color = 'green'
      if case('Cobble Tool'):
        obj_type = 'tool'
        color = 'green'
      if case('Core'):
        obj_type = 'tool'
        color = 'green'
      if case('Ground Stone'):
        obj_type = 'tool'
        color = 'green'
      if case('Modified Flake'):
        obj_type = 'tool'
        color = 'green'
      if case('Uniface'):
        obj_type = 'tool'
        color = 'green'
        break;
      if case():
        obj_type = 'other'
        color = 'black'
        break;

    plot_cords[obj_type]['est'] = plot_cords[obj_type]['est'] + (float(cords[1]),)
    plot_cords[obj_type]['nor'] = plot_cords[obj_type]['nor'] + (float(cords[0]),)
    plot_cords[obj_type]['elv'] = plot_cords[obj_type]['elv'] + (float(cords[2]),)
    plot_cords[obj_type]['colors'] = plot_cords[obj_type]['colors'] + (color,)

    cord_count++ 

    colors = colors + (color,)
    est = est + (float(cords[1]),)
    nor = nor + (float(cords[0]),)
    elv = elv + (float(cords[2]),)
  
    cords = cursor.fetchone()

  print plot_cords

  # If we didn't find anything then just move on
  if (cord_count < 1):
    print "Insufficient cordinates, skipping level UID:"+locus_txt
    # Fetch the next level
    level = levels.fetchone()
    continue
  print "Found Est:"+str(len(est))+" Nor:"+str(len(nor))+" Elv:"+str(len(elv))+" records"

  # Create the 
  full_path=data_root+'/'+site+'/plots'
  # Create the directory(s)
  ensure_dir(full_path)

  # Create the Easting / Northing Graph 
  plot_title = " East by North"
  plot_filename = full_path+'/Level-'+locus_txt+'-EstXNor.png'
  xlabel = 'Easting (meters)'
  ylabel = 'Northing (meters)'
  xcord = 'est'
  ycord = 'nor'
  save_scatterplot(plot_title,plot_filename,plot_cords,xcord,ycord,xlabel,ylabel)

  # Create the Easting / Elevation Graph
## Title should be SITE-UNIT-QUAD-LEVEL X BY Y
  plot_title = " East by MASL"
  plot_filename = full_path+'/Level-'+locus_txt+'-EstXElv.png'
  xlabel = 'Easting (meters)'
  ylabel = 'MASL'
  xcord = 'est'
  ycord = 'elv'
  save_scatterplot(plot_title,plot_filename,plot_cords,xlabel,ylabel)

  # Create the Northing / Elevation Graph
  plot_title =" North by MASL"
  plot_filename = full_path+'/Level-'+locus_txt+'-NorXElv.png'
  xlabel = 'Northing (meters)'
  ylabel = 'MASL'
  xcord = 'nor'
  ycord = 'elv'
  save_scatterplot(plot_title,plot_filename,plot_cords,xlabel,ylabel)  

  # make 3d plot
  plot_filename = full_path+'/Level-'+locus_txt+'-3D.png'
  fig = plt.figure()
  ax = fig.add_subplot(111,projection='3d')
  ax.scatter(est,nor,elv,color=colors,marker='o')
  ax.set_xlabel('Easting (meters)')
  ax.set_ylabel('Northing (meters)')
  ax.set_zlabel('    MASL')
  plt.ticklabel_format(useOffset=False)
  plt.savefig(plot_filename,format='png',bbox_inches='tight')
  plt.close()


  # Fetch the next level
  level = levels.fetchone()
